version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: farmer-postgres
    environment:
      - POSTGRES_DB=farmer
      - POSTGRES_USER=farmer_user
      - POSTGRES_PASSWORD=farmer_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - farmer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U farmer_user -d farmer"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: farmer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - farmer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Farmer AI Application
  farmer:
    build: .
    container_name: farmer-ai-app
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FARMER_DEBUG=false
      - FARMER_LOG_LEVEL=INFO
      - FARMER_LOG_FORMAT=json
      - FARMER_HOST=0.0.0.0
      - FARMER_PORT=5000
      - DATABASE_URL=postgresql://farmer_user:farmer_password@postgres:5432/farmer
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - FARMER_SECRET_KEY=${FARMER_SECRET_KEY:-your-secret-key-change-in-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_KEY=${HUGGINGFACE_KEY}
      - WEATHER_API_KEY=${WEATHER_API_KEY:-}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./static:/app/static
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - farmer-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: farmer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      farmer:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - farmer-network

volumes:
  postgres_data:
  redis_data:

networks:
  farmer-network:
    driver: bridge
